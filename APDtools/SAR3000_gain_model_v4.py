#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Mon Nov 14 20:52:05 2022

@author: htomio
"""

import matplotlib.pyplot as plt
import matplotlib as mpl
import matplotlib.colors as mpc
import numpy as np
import scipy.optimize as scop
import scipy.interpolate as scin

SAR_3000_import_gain_v_bias = [0.5128678345418436, 0.9434758032958257,
    1.8831056349086808, 0.9894778033827833,
    3.253343435275525, 1.035479803469741,
    4.623581235642369, 1.035479803469741,
    5.993819036009214, 1.035479803469741,
    7.364056836376058, 1.035479803469741,
    8.734294636742902, 1.035479803469741,
    10.10453243710974, 1.035479803469741,
    11.474770237476584, 1.035479803469741,
    12.845008037843428, 1.035479803469741,
    14.215245838210272, 1.035479803469741,
    15.585483638577116, 1.035479803469741,
    16.95572143894396, 1.053880603504524,
    18.325959239310798, 1.0814818035566987,
    19.696197039677642, 1.0814818035566987,
    21.066434840044487, 1.0814818035566987,
    22.43667264041133, 1.0814818035566987,
    23.806910440778175, 1.1090830036088732,
    25.17714824114502, 1.1274838036436563,
    26.547386041511857, 1.1642854037132508,
    27.917623841878708, 1.1780860037393097,
    29.287861642245545, 1.2240880038262674,
    30.658099442612382, 1.2654898039045577,
    32.028337242979234, 1.3114918039915153,
    33.39857504334607, 1.3666942040958645,
    34.76881284371292, 1.435697204226301,
    36.13905064407976, 1.513900604374129,
    37.5092884444466, 1.5967042045306528,
    38.87952624481345, 1.6933084047132922,
    40.249764045180285, 1.8129136049393821,
    41.62000184554714, 1.9555198052089509,
    42.990239645913974, 2.1119266055046353,
    44.360477446280825, 2.29133440584377,
    45.73071524664766, 2.4845428062089923,
    47.1009530470145, 2.732953606678592,
    48.47119084738135, 2.990564807165555,
    49.84142864774819, 3.298778207748171,
    51.21166644811504, 3.643793208400382,
    52.58190424848188, 4.025609809122159,
    53.952142048848714, 4.462628809948285,
    55.322379849215565, 4.950250010870064,
    56.71545494625518, 5.428670811774452,
    58.110286758423484, 5.978925505122334,
    59.40195148212594, 6.593357813976127,
    60.80333105068294, 7.061741814861534,
    62.17356885104978, 7.310152615331134,
    63.54380665141662, 7.452758815600703,
    64.91404445178347, 7.540162615765922,
    66.2842822521503, 7.62756641593117,
    67.65452005251716, 7.705769816078998,
    69.024757852884, 7.783973216226826,
    70.39499565325083, 7.848376016348567,
    71.76523345361768, 7.908178616461612,
    73.13547125398452, 7.972581416583353,
    74.50570905435137, 8.032384016696398,
    75.87594685471821, 8.087586416800775,
    77.24618465508505, 8.151989216922487,
    78.6164224554519, 8.207191617026865,
    79.98666025581873, 8.262394017131214,
    81.35689805618559, 8.326796817252955,
    82.72713585655242, 8.377399017348608,
    84.09737365691927, 8.446402017479045,
    85.46761145728611, 8.510804817600786,
    86.83784925765295, 8.561407017696439,
    88.2080870580198, 8.630410017826875,
    89.57832485838665, 8.694812817948645,
    90.94856265875347, 8.759215618070385,
    92.31880045912033, 8.81901821818343,
    93.68903825948718, 8.892621418322562,
    95.059276059854, 8.957024218444303,
    96.42951386022085, 9.012226618548652,
    97.7997516605877, 9.085829818687756,
    99.16998946095455, 9.159433018826888,
    100.54022726132138, 9.223835818948658,
    101.91046506168823, 9.292838819079094,
    103.28070286205508, 9.371042219226922,
    104.6509406624219, 9.440045219357359,
    106.02117846278875, 9.51364841949652,
    107.3914162631556, 9.578051219618231,
    108.76165406352246, 9.656254619766088,
    110.13189186388928, 9.739058219922583,
    111.50212966425613, 9.812661420061744,
    112.87236746462298, 9.890864820209572,
    114.2426052649898, 9.9690682203574,
    115.61284306535666, 10.04267142049656,
    116.98308086572351, 10.125475020653056,
    118.35331866609033, 10.203678420800912,
    119.72355646645718, 10.286482020957436,
    121.09379426682403, 10.378486021131351,
    122.46403206719089, 10.461289621287875,
    123.83426986755771, 10.544093221444399,
    125.20450766792456, 10.631497021609619,
    126.57474546829141, 10.718900821774866,
    127.94498326865823, 10.810904821948782,
    129.31522106902509, 10.898308622114001,
    130.68545886939194, 10.990312622287917,
    132.0556966697588, 11.086916822470528,
    133.4259344701256, 11.178920822644471,
    134.79617227049246, 11.270924822818387,
    136.1664100708593, 11.372129223009694,
    137.53664787122614, 11.468733423192333,
    138.906885671593, 11.569937823383611,
    140.27712347195984, 11.671142223574918,
    141.64736127232666, 11.77694682377495,
    143.0175990726935, 11.878151223966256,
    144.38783687306037, 11.979355624157563,
    145.75807467342722, 12.08056002434887,
    147.12831247379404, 12.190964824557597,
    148.4985502741609, 12.30596982477499,
    149.86878807452774, 12.411774424974993,
    151.23902587489457, 12.531379625201112,
    152.60926367526142, 12.64178442540981,
    153.97950147562827, 12.7613896256359,
    155.34973927599512, 12.88099482586199,
    156.71997707636194, 12.995999826079384,
    158.0902148767288, 13.115605026305474,
    159.46045267709565, 13.24901082655768,
    160.83069047746247, 13.36861602678377,
    162.20092827782932, 13.492821427018583,
    163.57116607819617, 13.630827427279456,
    164.941403878563, 13.755032827514242,
    166.31164167892985, 13.902239227792506,
    167.6818794792967, 14.031044828035988,
    169.05211727966355, 14.173651028305585,
    170.42235508003037, 14.307056828557762,
    171.79259288039722, 14.463463628853418,
    173.16283068076407, 14.606069829123015,
    174.5330684811309, 14.75327622940128,
    175.90330628149775, 14.909683029696936,
    177.2735440818646, 15.056889429975229,
    178.64378188223145, 15.208696030262189,
    180.01401968259827, 15.374303230575237,
    181.38425748296513, 15.530710030870893,
    182.75449528333198, 15.69631723118394,
    184.1247330836988, 15.85732423148832,
    185.49497088406565, 16.03213183181876,
    186.8652086844325, 16.206939432149227,
    188.23544648479935, 16.372546632462274,
    189.60568428516618, 16.556554632810133,
    190.97592208553303, 16.740562633157964,
    192.34615988589988, 16.924570633505795,
    193.7163976862667, 17.117779033871017,
    195.08663548663355, 17.310987434236267,
    196.4568732870004, 17.508796034610185,
    197.82711108736723, 17.715805035001523,
    199.19734888773408, 17.918213835384137,
    200.56758668810093, 18.116022435758083,
    201.93782448846778, 18.341432236184176,
    203.3080622888346, 18.55304143658421,
    204.67830008920146, 18.764650636984214,
    206.0485378895683, 19.003861037436394,
    207.41877568993513, 19.22467063785382,
    208.78901349030198, 19.486882038349478,
    210.15925129066883, 19.7122918387756,
    211.52948909103569, 19.95150223922778,
    212.8997268914025, 20.20911343971477,
    214.26996469176936, 20.45752424018434,
    215.6402024921362, 20.733536240706115,
    217.01044029250303, 20.991147441193107,
    218.38067809286989, 21.276359841732244,
    219.75091589323674, 21.55237184225402,
    221.1211536936036, 21.84218444280185,
    222.49139149397044, 22.131997043349713,
    223.86162929433723, 22.444810643941054,
    225.23186709470409, 22.748423844514974,
    226.60210489507094, 23.061237445106315,
    227.9723426954378, 23.387851645723714,
    229.34258049580464, 23.71446584634114,
    230.7128182961715, 24.05028044697596,
    232.08305609653834, 24.404495847645535,
    233.45329389690514, 24.75411104830644,
    234.823531697272, 25.126727249010827,
    236.19376949763884, 25.499343449715212,
    237.5640072980057, 25.885760250445657,
    238.93424509837254, 26.28137745119352,
    240.3044828987394, 26.690795251967472,
    241.67472069910625, 27.100213052741424,
    243.04495849947304, 27.54183225357623,
    244.4151962998399, 27.969650854384966,
    245.78543410020674, 28.42967085525457,
    247.1556719005736, 28.889690856124176,
    248.52590970094045, 29.37731205704594,
    249.9023758549453, 29.828549857898963,
    251.26638530167415, 30.384755858950385,
    252.63662310204094, 30.90917865994173,
    254.0068609024078, 31.442801860950468,
    255.40344942970475, 31.924053554167898,
    256.7701737998143, 32.52384886299403,
    258.1518302485175, 33.041371363972345,
    259.5106494005481, 33.67543226517094,
    260.8923058492512, 34.31217661637464,
    262.2711076358703, 34.97920561763554,
    263.6213628016485, 35.613649868834855,
    264.9687633053426, 36.296012870124784,
    266.3390011057094, 37.02744467150745,
    267.7092389060763, 37.7818774729336,
    269.0794767064431, 38.58231227444669,
    270.44971450680987, 39.40804817600764,
    271.8199523071768, 40.26598547762946,
    273.1901901075436, 41.172224879342565,
    274.5604279079105, 42.092264881081775,
    275.9306657082773, 43.01460498282533,
    277.26845050810914, 44.00861135838856,
    278.5341175289743, 44.977612553202775,
    279.7391207710616, 45.89825388827646,
    280.86352178959794, 46.85347189008216,
    281.9597120298914, 47.79651289186485,
    283.03306497351207, 48.71501949360116,
    284.03790602711445, 49.67186109540994,
    285.0884216740624, 50.6409698972419,
    286.0704254309919, 51.64753747057324,
    287.02959189124874, 52.61357947239941,
    287.9729479153474, 53.56976390277836,
    288.8109010317256, 54.51663840456831,
    289.6330437119457, 55.459679406350986,
    290.45518639216584, 56.39121990811192,
    291.2773290723859, 57.36876240995984,
    292.09324339896807, 58.33724391179061,
    292.78459065278946, 59.28781251358754,
    293.46970955297286, 60.19405191530065,
    294.15482845315626, 61.11409191703986,
    294.83994735333977, 62.03413191877905,
    295.57249756199735, 62.8197045356487,
    296.27869704372495, 63.828209922170515,
    296.96381594390834, 64.8862559241706,
    297.64893484409174, 65.97496992622867,
    298.33405374427514, 67.0759511283099,
    298.9898104058793, 68.15568378749386,
    299.665141893203, 69.26630350387903,
    300.22954936811595, 70.32599243445365,
    300.7776444882627, 71.33036943635229,
    301.298750075978, 72.32185193822653,
    301.8281601352106, 73.35062394017127,
    302.37625525535736, 74.44700494224382,
    302.9243503755041, 75.5855544443961,
    303.47244549565085, 76.7509384465991,
    303.9794334817866, 77.81741814861512,
    304.45029701682176, 78.84995395056698,
    304.9797070760544, 79.95957795266457,
    305.60610149907916, 80.99024181175575,
    306.0073854263295, 82.08333695667923,
    306.3810866446113, 83.06540995853571,
    306.7952721615404, 84.08059046045476,
    307.2063435016505, 85.13096946244035,
    307.6174148417606, 86.21201646448392,
    308.0253720050515, 87.255773966457,
    308.4053015769715, 88.30894096844787,
    308.8163729170815, 89.44365697059288,
    309.1315276111659, 90.51397017261615,
    309.6227051611436, 91.62403382086843,
    310.0906940714227, 92.84320477701925,
    310.5291701675401, 94.11066940798665,
    310.7783043130613, 95.21830198150903,
    311.1769189458953, 96.22616398341427,
    311.4198247377785, 97.18886038523411,
    311.69387229785195, 98.10430018696461,
    311.96791985792527, 99.02894038871253,
    312.2419674179986, 99.9765815905039,
    312.516014978072, 100.93342319231266,
    312.72155064812705, 101.84630732737168,
    313.03670534221146, 102.80110439584325,
    313.3107529022848, 103.80394799773899,
    313.6558036938317, 104.7992639996205,
    313.93192737178447, 105.84337000159422,
    314.2038988139784, 106.91117400361276,
    314.41566283767156, 107.96085600559704,
    314.70839545865897, 109.06734350768869,
    314.92638783599, 110.18568000980275,
    315.2502622251677, 111.26881801185027,
    315.46202624886075, 112.37286601393731,
    315.73607380893407, 113.54870501616008,
    316.0101213690075, 114.76775801846453,
    316.336870382941, 116.04048002087043,
    316.6463032048921, 117.31539259470904,
    316.8955057938599, 118.56351279487063,
    317.17482349931925, 119.87085064035611,
    317.3554457548222, 121.10488203044397,
    317.66419414230745, 122.39532774716909,
    317.9773913538198, 123.8476766070574,
    318.2710137396127, 125.30125766337662,
    318.4554688281237, 126.73063711800174,
    318.7323271324028, 128.09300404365402,
    319.0246445298144, 129.67144767163785,
    319.2986920898878, 131.32176942475755,
    319.61304076173667, 133.01251205295367,
    319.91529910005295, 134.68917972278982,
    320.1893466601264, 136.41681039272234,
    320.42712321960175, 138.15932406268297,
    320.67871730311447, 139.75779692284752,
    320.8059536702914, 140.90200540120097,
    321.1622154983868, 142.1144136701595,
    321.27183452241616, 143.43007087264658,
    321.4088583024528, 144.43291447454232,
    321.54588208248947, 145.43575807643805,
    321.68290586252624, 146.4294012783164,
    321.8199296425629, 147.42304448019473,
    321.95695342259955, 148.42128788208177,
    322.0939772026362, 149.41033088395142]
    
SAR_3000_import_noise_v_gain = '''10.080816774775156, 3.013419008956822
10.44558641348374, 3.1275472076847084
10.823555070912374, 3.251145033351154
11.215200347378305, 3.3796273328544566
11.621017124942828, 3.5140436228823764
12.04151819274308, 3.6533606844579025
12.477234894951247, 3.797275336901462
12.92871780217977, 3.94685913317636
13.396537407181127, 4.102835422158894
13.881284845721149, 4.2644559641231865
14.383572643536784, 4.434064117102803
14.904035490322192, 4.610418013454886
15.443331041721208, 4.7937859483813305
16.00214075033943, 4.984446887859873
16.58117072682618, 5.182690893047704
17.18115263211427, 5.388819561564704
17.80284460194508, 5.605878823282476
18.447032204847076, 5.832391950901775
19.114529434778404, 6.069536991841535
19.80617973968778, 6.317094237075924
20.52285708729332, 6.576351431238718
21.26546706942614, 6.847917750580136
22.034948046334073, 7.130698231234512
22.832272332391547, 7.42606099642023
23.6584474247137, 7.736486347905286
24.514517276227423, 8.059888147993583
25.4015636148079, 8.40192746182429
26.320707310147345, 8.758481976121503
27.2731097900834, 9.125717580543947
28.25997450817667, 9.506033563121358
29.282548464391784, 9.910651127767437
30.3421237808037, 10.33123169279686
31.440039334320122, 10.769660531304988
32.577682448483316, 11.228063480053965
33.75649064648883, 11.708831847748627
34.977953467636475, 12.21018597573813
36.24361434950883, 12.736111519130832
37.55507257825525, 13.2782150570274
38.913985309446154, 13.841705701513916
40.322069662051064, 14.429109327154922
41.781104888186, 15.043274113887321
43.292934621372396, 15.681668972625173
44.8594692061481, 16.347155539762234
46.482688111974376, 17.04296060077629
48.16464243448879, 17.766216611591325
49.907457487264985, 18.52016560289452
51.71333548735389, 19.317878936481662
53.58455833800019, 20.15486432433892
55.52349051204993, 21.01018090408127
57.53258203969271, 21.90179474883169
59.61437160431444, 22.834029081248758
61.77148975037168, 23.829166585094693
64.00666220734124, 24.84949476038436
66.32271333394607, 25.92298865069818
68.7225696870079, 27.04615350650691
71.20926371943807, 28.23518314169069
73.78593761203778, 29.48367219844213
76.45584724395027, 30.79862556718572
79.2223663067825, 32.20360982672276
82.0889905675939, 33.726082361720785
85.05934228613918, 35.39379127085258
88.1371747919479, 37.221007420258324
91.32637722702262, 39.238085356362305
94.6309794601495, 41.40482467675407
98.05515717903161, 43.6858872095621
101.603237166678, 45.94678525121467
105.27970276871632, 48.171798532866966
109.08919955853851, 50.52303006249368
113.03654120743634, 53.09245814718098
117.12671556714483, 55.86740935116995
121.36489097248081, 58.909329768466684
125.7564227720385, 62.3444214631367
130.30686009519513, 66.10055426515675
135.02195286397884, 69.82720106259569
139.90765905865564, 73.26220046387022
144.97015224622058, 76.49234787294287
150.21582938130206, 79.90385882183843
155.65131888933846, 83.95726169321911
161.28348904224205, 88.8312796526859
167.11945663713095, 94.32104589568034
172.59050175395546, 98.81355626926602'''

SAR_3000_import_dark_noise_v_gain = '''10.080816774775156, 0.1703074252869488
10.44558641348374, 0.17036970844970406
10.823555070912374, 0.17036970844970406
11.215200347378305, 0.17024516489345476
11.621017124942828, 0.1699963508456558
12.04151819274308, 0.16970652735667036
12.477234894951247, 0.16970652735667036
12.92871780217977, 0.169582468598643
13.396537407181127, 0.16919021384690683
13.881284845721149, 0.16904592776222674
14.383572643536784, 0.16904592776222674
14.904035490322192, 0.16904592776222674
15.443331041721208, 0.16904592776222674
16.00214075033943, 0.16904592776222674
16.58117072682618, 0.16904592776222674
17.18115263211427, 0.1694585005299705
17.80284460194508, 0.1697892836110904
18.447032204847076, 0.17032818381087153
19.114529434778404, 0.1709521174712185
19.80617973968778, 0.17178758576116004
20.52285708729332, 0.17279553909879525
21.26546706942614, 0.17397896186535441
22.034948046334073, 0.1751491408518511
22.832272332391547, 0.1764992019215897
23.6584474247137, 0.17788134840658282
24.514517276227423, 0.17940546720463665
25.4015636148079, 0.18116331428487167
26.320707310147345, 0.18282693535801
27.2731097900834, 0.18477588420556
28.25997450817667, 0.1867228496179686
29.282548464391784, 0.18880535399819634
30.3421237808037, 0.1910274621125309
31.440039334320122, 0.19334640580223697
32.577682448483316, 0.1958127929490705
33.75649064648883, 0.19835898863746046
34.977953467636475, 0.2010362792700963
36.24361434950883, 0.20382421917158805
37.55507257825525, 0.20670120159599817
38.913985309446154, 0.20990001544649117
40.322069662051064, 0.21304444298679967
41.781104888186, 0.21639416425361402
43.292934621372396, 0.220037787282793
44.8594692061481, 0.22379730795008448
46.482688111974376, 0.22781534484787716
48.16464243448879, 0.23193378784769358
49.907457487264985, 0.23638584057376238
51.71333548735389, 0.2409820872299983
53.58455833800019, 0.24569764661401353
55.52349051204993, 0.250658186454393
57.53258203969271, 0.25593714187170014
59.61437160431444, 0.26129542515134097
61.77148975037168, 0.2670912245610673
64.00666220734124, 0.27298230730567974
66.32271333394607, 0.27920743242953755
68.7225696870079, 0.28571377464622777
71.20926371943807, 0.2925143066123514
73.78593761203778, 0.2998784795603242
76.45584724395027, 0.30750299719746044
79.2223663067825, 0.31585987431107787
82.0889905675939, 0.32551329802381435
85.05934228613918, 0.33701904185465403
88.1371747919479, 0.3506367527692574
91.32637722702262, 0.3671241137953306
94.6309794601495, 0.3865007491063046
98.05515717903161, 0.4075949747558229
101.603237166678, 0.42921225575682737
105.04607530532509, 0.45441430078631195
108.48500353609752, 0.4832930238571757
112.28568763094304, 0.5117447749849606
116.3486927052712, 0.5411235169803217
120.55871571734647, 0.5727470466003511
124.92107644246435, 0.6074760456527817
129.4412871495002, 0.6466710589036401
134.12505956620018, 0.6880594493207878
138.97831209650633, 0.7278263119034666
144.00717729903872, 0.7672686187298355
149.218009636182, 0.8096374313364135
154.44574155675124, 0.8588909764823872
159.5018830567392, 0.9155384317857909
164.17554340790272, 0.9734736702163058
168.79854574282538, 1.0355742478333603
173.7446131838704, 1.1039109770810545
177.845118296044, 1.15431292625802'''

SAR_3000_import_dark_v_bias = '''0.2335279673646582, 9.359796973422362e-10
0.2967583165576926, 7.747972079248857e-10
0.42321901494377556, 6.308501295924748e-10
0.4358650847823853, 5.114415410268082e-10
0.5623257831684683, 4.178766979611745e-10
0.6887864815545441, 3.4203725889931613e-10
0.8083493236650199, 2.7865092208007865e-10
0.9782409689715692, 2.275262496433211e-10
1.1328040447767762, 1.884563735869198e-10
1.3987729739221066, 1.4818188911291607e-10
1.6245956496115284, 1.1586519603730939e-10
2.5867966155925757, 9.448243306236393e-11
5.2919559028078424, 1.029726748123973e-10
7.947630568915514, 1.0834548454483662e-10
10.603305235023186, 1.1227239616443658e-10
13.258979901130857, 1.1584957153920541e-10
15.914654567238529, 1.1916132422447735e-10
18.570329233346214, 1.2210109201166354e-10
21.226003899453886, 1.2479561747361743e-10
23.881678565561558, 1.2725261509035006e-10
26.53735323166923, 1.298680276645069e-10
29.1930278977769, 1.3194866535887036e-10
31.848702563884572, 1.343185792696568e-10
34.504377229992244, 1.3635488434659416e-10
37.160051896099915, 1.3848074227000152e-10
39.8157265622076, 1.4058014683544452e-10
42.47140122831527, 1.4304444821840586e-10
45.127075894422944, 1.4545943982795933e-10
47.782750560530616, 1.483547067036997e-10
50.43842522663829, 1.5169287726034116e-10
53.09409989274596, 1.5556703099212652e-10
55.74977455885363, 1.6011593745612984e-10
58.4054492249613, 1.659895744033492e-10
61.06112389106897, 1.7291947401537168e-10
63.71679855717666, 1.7748613295134773e-10
66.37247322328433, 1.7994791395545486e-10
69.028147889392, 1.8217339353706008e-10
71.68382255549967, 1.839190024034767e-10
74.33949722160735, 1.8556332529414608e-10
76.99517188771502, 1.8706370996765357e-10
79.65084655382269, 1.8849631595901836e-10
82.30652121993036, 1.8969853169515195e-10
84.96219588603803, 1.9107031481649388e-10
87.6178705521457, 1.9241123724437507e-10
90.27354521825337, 1.9372051212285285e-10
92.92921988436105, 1.9503869604808083e-10
95.58489455046875, 1.9615788816300764e-10
98.24056921657642, 1.974926573732966e-10
100.89624388268409, 1.987522511179136e-10
103.55191854879176, 1.9951186021928313e-10
106.20759321489943, 2.009120250133456e-10
108.8632678810071, 2.02236281105945e-10
111.51894254711478, 2.0318136759194917e-10
114.17461721322245, 2.044772435148582e-10
116.83029187933012, 2.0586862232406308e-10
119.48596654543779, 2.0669922897801295e-10
122.14164121154546, 2.0819395068709866e-10
124.79731587765313, 2.0952179649888777e-10
127.4529905437608, 2.1050092950762335e-10
130.1086652098685, 2.1197821506994387e-10
132.76433987597613, 2.134206347318656e-10
135.42001454208383, 2.1459982472917038e-10
138.07568920819148, 2.1587700896715282e-10
140.73136387429918, 2.173920236007227e-10
143.38703854040688, 2.1877853404976356e-10
146.04271320651452, 2.2017388756118386e-10
148.69838787262222, 2.217660497145624e-10
151.35406253872986, 2.2327507133902156e-10
154.00973720483756, 2.2488965934633145e-10
156.6654118709452, 2.2627603111195712e-10
159.3210865370529, 2.2781574120051415e-10
161.97676120316055, 2.294631645398624e-10
164.63243586926825, 2.3126948790432388e-10
167.2881105353759, 2.329418866158648e-10
169.9437852014836, 2.345269549552185e-10
172.59945986759124, 2.36373140242433e-10
175.25513453369894, 2.38132905795273e-10
177.91080919980658, 2.4010922447491073e-10
180.56648386591428, 2.419993531282885e-10
183.22215853202192, 2.4421469092790095e-10
185.87783319812962, 2.4634587404094954e-10
188.53350786423732, 2.4844299907104887e-10
191.18918253034497, 2.5050488353951327e-10
193.84485719645266, 2.5258388005209623e-10
196.5005318625603, 2.5495013586054785e-10
199.15620652866795, 2.571750037509714e-10
201.81188119477565, 2.597493578065137e-10
204.4675558608833, 2.622383095311849e-10
207.123230526991, 2.646950099468991e-10
209.7789051930987, 2.675146632581519e-10
212.43457985920634, 2.7024978453596723e-10
215.09025452531404, 2.7295501878767376e-10
217.74592919142168, 2.7580420622024343e-10
220.40160385752938, 2.7909685565453065e-10
223.05727852363702, 2.823689672477345e-10
225.71295318974472, 2.855583827155706e-10
228.36862785585237, 2.8908998436696066e-10
231.02430252196007, 2.9247925468714354e-10
233.6799771880677, 2.9609644921328e-10
236.3356518541754, 3.0013977450640395e-10
238.99132652028305, 3.0423831315811116e-10
241.64700118639075, 3.085235575702158e-10
244.3026758524984, 3.1300179643889354e-10
246.9583505186061, 3.1767965560975794e-10
249.61402518471374, 3.2276925524471653e-10
252.26969985082144, 3.2814895632426725e-10
254.92537451692914, 3.3319438491880453e-10
257.5810491830368, 3.3910697668942515e-10
260.2367238491445, 3.4519763580382715e-10
262.8923985152521, 3.514721654618867e-10
265.5480731813598, 3.5831606673533136e-10
268.20374784746747, 3.658355321863632e-10
270.85942251357517, 3.736711429383868e-10
273.5150971796828, 3.819173133243841e-10
276.1707718457905, 3.910078051939473e-10
278.82644651189815, 4.009939322620596e-10
281.48212117800585, 4.1149663259471065e-10
284.1377958441135, 4.2299093888862547e-10
286.7934705102212, 4.3572874417423226e-10
289.44914517632884, 4.4932599060430586e-10
292.10481984243654, 4.642321365649172e-10
294.7604945085442, 4.811598862057776e-10
297.4161691746519, 4.99656977520859e-10
300.0718438407596, 5.217319767985545e-10
302.7275185068672, 5.453598202944168e-10
305.3831931729749, 5.733288722295335e-10
308.03886783908257, 6.040110106831814e-10
310.69454250519027, 6.394443342015728e-10
313.3502171712979, 6.818516276333818e-10
316.0058918374056, 7.329501131847629e-10
318.66156650351326, 7.942483984672881e-10
321.31724116962096, 8.698414866063302e-10
323.9729158357286, 9.703559757802939e-10
326.6285905018363, 1.1026285928762793e-9
329.28426516794394, 1.2805814362471313e-9
331.7502487864725, 1.5198063065814741e-9
333.8368503098428, 1.8192555296252453e-9
335.54406973805493, 2.188608918153335e-9
337.1831949440591, 2.6705318424596693e-9
338.33885117238725, 3.1675033757156894e-9
339.27466034044426, 3.836432133394824e-9
340.0966548799538, 4.688072222622962e-9
340.86116728383325, 5.7248490463774145e-9
341.58013614948277, 6.9287832947403695e-9
342.02230642355994, 8.43852634929252e-9
342.52814921710427, 1.029708334967229e-8
343.0368661174301, 1.2722705188197796e-8
343.41337410580684, 1.574729975177746e-8
343.7467704924611, 1.9465982159417508e-8
344.00639813839007, 2.4774908582262808e-8
344.08016687911527, 3.074717271953265e-8
344.2871025673834, 3.7444996562781145e-8
344.36470345048394, 4.785466181864774e-8
344.4710454013995, 6.124250507401408e-8
344.6650476091509, 8.064905510859574e-8
344.7124703710457, 1.0708606545140127e-7
344.8784500376774, 1.4511930124836557e-7
344.9744246748454, 1.9849245504709676e-7
345.09185246620393, 2.687265334821818e-7
345.23412075188827, 3.6949390967977676e-7
345.3953581423305, 5.159187191499409e-7
345.5218188407166, 7.042121584567878e-7
345.639848825877, 9.495107628891622e-7
345.73469434966654, 0.00000125614285843238
345.8700721485798, 0.000001646752693133933
346.03455949053654, 0.000002110131201234285
346.1840130431746, 0.0000026811908612753734
346.2805830310331, 0.0000033203864772849245
346.4070437294192, 0.000004065647852746008
346.53350442780527, 0.000004962699079969448
346.6599651261913, 0.0000060469031910915565
346.799071894416, 0.000007467004367371989
346.9255325928021, 0.000009102375685571545'''

class APD_model:
    
    def __init__(self):
        self.V_dark, self.I_dark = self.import_data(SAR_3000_import_dark_v_bias)
        self.M_noise, self.I_noise = self.import_data(SAR_3000_import_noise_v_gain)
        self.M_dark_noise, self.I_dark_noise = self.import_data(SAR_3000_import_dark_noise_v_gain)
        
        self.Vapd = np.array(SAR_3000_import_gain_v_bias[0::2])
        self.M = np.array(SAR_3000_import_gain_v_bias[1::2])

        self.Vapd_sel = self.Vapd[50:]
        self.M_sel = self.M[50:]
    
        

    def import_data(self, stf):
        x,y = list(zip(*[st.split(', ') for st in stf.split('\n')]))
        x = np.array([float(z) for z in x])
        y = np.array([float(z) for z in y])
        return x,y
    

    def Idark(self, V):
       return np.interp(V, self.V_dark, self.I_dark)

    def Mdiv(self, V, Vbr, m):
        return 1/(1-(V/Vbr)**m)
    
    def Mresiduals(self, x):
        Vbr = x[0]
        m = x[1]
        return self.M_sel - self.Mdiv(self.Vapd_sel, Vbr, m)
    
    def Mtrue(self, V):
        return np.interp(V, self.Vapd, self.M)
    
    def Inoise_dark(self, M):
        Idn = np.interp(M, self.M_dark_noise, self.I_dark_noise)
        return Idn
    
    def Inoise(self, M, P):
        In_interp = (M >  self.M_noise[0])*np.interp(M, self.M_noise, self.I_noise)
        In_ext    = (M <= self.M_noise[0])*self.I_noise[0]*0.1*M
        return np.sqrt(P/350e-9)*(In_interp + In_ext) + self.Inoise_dark(M)
    
    def APDcurve(self, Vbias, Resp, Rq):
        V = np.linspace(0, Vbias, 1000)
        P = ((Vbias - V)/Rq - self.Idark(V))/self.Mtrue(V)/Resp
        return [V,np.maximum(P,0)]
        
    def APDcurveLog(self, Vbias, Resp, Rq):
        V = np.linspace(0 ,Vbias, 1000)
        eq = ((Vbias - V)/Rq - self.Idark(V))/self.Mtrue(V)/Resp
        return [V,eq]
        
    def Pcurve(self, Pmax, V, Resp):
        curve = (Pmax - V*self.Idark(V))/(V*Resp*self.Mtrue(V) + 1)
        return curve
        #return (curve > 1e-9)*curve + (curve <= 1e-9)*(Pmax)
        
    def Iapd(self, Resp, V, P):
        return(Resp*self.Mtrue(V)*P + self.Idark(V))
    
    def Iapd_max(self, Pmax, V, Resp, P):
        return np.maximum(Pmax/300, Resp*(Pmax - V*self.Idark(V))/(V*Resp + 1/self.Mtrue(V)))
    
    ## Iterate to find Iapd
    def Iapd_new(self, Popt, Vbias, Resp, Rq):
        Vapd = Vbias
        for i in range(100):
            gain = self.Mtrue(Vapd)
            Iapd = Popt*Resp*gain+self.Idark(Vapd)
            # Iapd = np.minimum(1e-3, Popt*Resp*self.Mtrue(Vapd)+self.Idark(Vapd))
            Vapd = Vbias - Iapd*Rq
        print(gain)
        # V = Vbias
        # diff = V
        # Vbiasdiff = 0
        # for i in np.arange(Vbias, 340, -0.1):
        #     V = i
        #     Itemp = (Popt*Resp*self.Mtrue(V)+self.Idark(V))
        #     Vtemp = Itemp*Rq
        #     V2 = V - Vtemp
        #     Itemp2 = (Popt*Resp*self.Mtrue(V2)+self.Idark(V2))
        #     Vtemp2 = Itemp2*Rq
        #     # print(Itemp, Vtemp, V, Itemp2, Vtemp2, V2, Vtemp-Vtemp2)
        #     if(diff > abs(Vtemp-Vtemp2)):
        #         diff = abs(Vtemp-Vtemp2)
        #         Vbiasdiff = V
        
        # print(Vbiasdiff, diff)
        return [Vapd, Iapd, gain]
        

if __name__ == '__main__':
    apd_model = APD_model()
    
    #plt.figure()
    #plt.plot(Vapd,M,label='Datasheet')
    #plt.plot(Vapd_sel,Mdiv(Vapd_sel,345,0.1),label='Model')

    #H non linear least squares on residuals 
    x = scop.least_squares(apd_model.Mresiduals,(350,0.1),bounds=((325,0.1),(400,1)),ftol=1e-9).x
    Vbr = x[0]
    m = x[1]

    #H least squares polynomial fit, returns vector of coefficients for fit
    z = np.polyfit(apd_model.Vapd_sel, apd_model.M_sel, 9) 
    #H convience class for polynomial to apply operations
    p = np.poly1d(z)
    
    if 1:
        # plot APD gain vs APD bias data, and different fit models
        plt.figure()
        plt.plot(apd_model.Vapd, apd_model.M, label='Datasheet')
        plt.plot(apd_model.Vapd_sel, apd_model.Mdiv(apd_model.Vapd_sel, x[0], x[1]), label='Div Model')
        plt.plot(apd_model.Vapd_sel, p(apd_model.Vapd_sel), label='Poly Model')
        plt.legend()
        plt.xlabel('APD bias, V')
        plt.ylabel('APD gain')

    if 1:
        # plot residuals of the fits vs bias data
        plt.figure()
        plt.plot(apd_model.Vapd_sel, apd_model.Mresiduals(x),label='Div Model')
        plt.plot(apd_model.Vapd_sel, apd_model.M_sel-p(apd_model.Vapd_sel),label='Poly Model')
        plt.legend()
        plt.xlabel('APD bias, V')
        plt.ylabel('APD gain residuals')
        
    if 0:
        # plot APD dark current v APD bias data, interpolated from the dark vs APD bias 
        plt.figure()
        plt.semilogy(apd_model.Vapd_sel, apd_model.Idark(apd_model.Vapd_sel), label='Div Model')
        plt.xlabel('APD bias, V')
        plt.ylabel('APD current, A')
        
    
    ########
    Vbias = 340
    Resp = 0.45
    Rq = 1e5
    Pmax = 0.06 # max power is 60 mW ?
    
    V = np.linspace(5,350,1000)
    
    
    if 1:
        #H Plot optical power vs APD bias for varying total bias
        #H Optical power is found using the interpolated dark current, gain
        plt.figure()
        x,y=apd_model.APDcurve(140,Resp,Rq)
        plt.semilogy(x,y,label='Total bias 140V',color='C0')
        x,y=apd_model.APDcurve(190,Resp,Rq)
        plt.semilogy(x,y,label='Total bias 190V',color='C1')
        x,y=apd_model.APDcurve(240,Resp,Rq)
        plt.semilogy(x,y,label='Total bias 240V',color='C2')
        x,y=apd_model.APDcurve(290,Resp,Rq)
        plt.semilogy(x,y,label='Total bias 290V',color='C4')
        x,y=apd_model.APDcurve(340,Resp,Rq)
        plt.semilogy(x,y,label='Total bias 340V',color='C6')
        plt.semilogy(V, apd_model.Pcurve(Pmax, V, Resp),color='red',label='CW power limit')
        plt.semilogy(V, apd_model.Pcurve(5*Pmax, V, Resp),color='red',linestyle='--',label='1s power limit')
        plt.xlabel('APD bias, V')
        plt.ylabel('Optical power, W')
        plt.legend()
    
        #H Plot optical power vs APD bias for varying R_quench
        #H Optical power is found using the interpolated dark current, gain
        plt.figure()
        x,y=apd_model.APDcurve(Vbias,Resp,1e7)
        plt.semilogy(x,y,label='$R_{quench}= 10M\Omega$',color='C0')
        x,y=apd_model.APDcurve(Vbias,Resp,1e6)
        plt.semilogy(x,y,label='$R_{quench}= 1M\Omega$',color='C1')
        x,y=apd_model.APDcurve(Vbias,Resp,1e5)
        plt.semilogy(x,y,label='$R_{quench}= 100k\Omega$',color='C2')
        x,y=apd_model.APDcurve(Vbias,Resp,1e4)
        plt.semilogy(x,y,label='$R_{quench}= 10k\Omega$',color='C4')
        x,y=apd_model.APDcurve(Vbias,Resp,1e3)
        plt.semilogy(x,y,label='$R_{quench}= 1k\Omega$',color='C6')
        plt.semilogy(V, apd_model.Pcurve(Pmax, V, Resp),color='red',label='CW power limit')
        plt.semilogy(V, apd_model.Pcurve(5*Pmax, V, Resp),color='red',linestyle='--',label='1s power limit')
        plt.xlabel('APD bias, V')
        plt.ylabel('Optical power, W')
        plt.legend()
        
    if 1: 
        ## TODO WRITE DOWN THIS EQUATION -> Iapd, Pcurve
        #H Plot APD current vs optical power W for varying bias voltages
        #H quench resistance is held fixed 10^5
        #H APD current is found using the interpolated gain and dark current
        plt.figure()
        x,y = apd_model.APDcurve(140,Resp,Rq)
        plt.loglog(y, apd_model.Iapd(Resp,x,y),label='$V_{bias}=140V$',color='C0')
        x,y = apd_model.APDcurve(190,Resp,Rq)
        plt.loglog(y, apd_model.Iapd(Resp,x,y),label='$V_{bias}=190V$',color='C1')
        x,y = apd_model.APDcurve(240,Resp,Rq)
        plt.loglog(y, apd_model.Iapd(Resp,x,y),label='$V_{bias}=240V$',color='C2')
        x,y = apd_model.APDcurve(290,Resp,Rq)
        plt.loglog(y, apd_model.Iapd(Resp,x,y),label='$V_{bias}=290V$',color='C4')
        x,y = apd_model.APDcurve(340,Resp,Rq)
        plt.loglog(y, apd_model.Iapd(Resp,x,y),label='$V_{bias}=340V$',color='C6')
        
        # Plot CW power limit using max power 60 mW
        y = apd_model.Pcurve(Pmax,V,Resp)
        yR = apd_model.Iapd_max(Pmax,V,Resp,y)
        y = np.append(y,1e-8)
        yR = np.append(yR,200e-6)
        plt.loglog(y,yR,color='red',label='CW power limit')
        
        # five times the CW power limit
        y= apd_model.Pcurve(5*Pmax,V,Resp)
        yR = apd_model.Iapd_max(5*Pmax,V,Resp,y)
        y = np.append(y,1e-8)
        yR = np.append(yR,1e-3)
        plt.loglog(y,yR,color='red',linestyle='--',label='1s power limit')
        
        # Plot minimum response using V bias is 60 V
        Pmr = np.logspace(-12,-1,1000)
        plt.loglog(Pmr, apd_model.Iapd(Resp,60,Pmr),color='black',label='Minimum response',linestyle='--')
        
        plt.ylabel('APD current, A')
        plt.xlabel('Optical power, W')
        plt.title('APD CW response, $R_{quench}= 10^{%d}\Omega$' % np.log10(Rq))
        plt.legend()
    
    if 0:
        #H Plot APD current vs optical power W for varying quench resistances
        #H V bias is held fixed at 340 V
        #H APD current is found by interpolating the voltages and powers from APDcurve?
        
        def Iapd_exp_c(Pi,Vbias,Resp,Rq):
            Vcv,Pcv = apd_model.APDcurve(Vbias,Resp,Rq)
            id = Pcv.argsort()
            Pcv = Pcv[id]
            Vcv = Vcv[id]
            Vi = np.interp(Pi,Pcv,Vcv)
            return apd_model.Iapd(Resp,Vi,Pi)
            
        P = np.logspace(-12,0,1000)
    
        plt.figure()
        plt.loglog(P,Iapd_exp_c(P,Vbias,Resp,10e6),label='$R_{quench}= 10M\Omega$',color='C0')
        plt.loglog(P,Iapd_exp_c(P,Vbias,Resp,2e6),label='$R_{quench}= 2M\Omega$',color='C1')
        plt.loglog(P,Iapd_exp_c(P,Vbias,Resp,500e3),label='$R_{quench}= 500k\Omega$',color='C2')
        y = apd_model.Pcurve(Pmax,V,Resp)
        yR = apd_model.Iapd_max(Pmax,V,Resp,y)
        y = np.append(y,1e-8)
        yR = np.append(yR,200e-6)
        plt.loglog(y,yR,color='red',label='CW power limit')
        y = apd_model.Pcurve(5*Pmax,V,Resp)
        yR = apd_model.Iapd_max(5*Pmax,V,Resp,y)
        y = np.append(y,1e-8)
        yR = np.append(yR,1e-3)
        plt.loglog(y,yR,color='red',linestyle='--',label='1s power limit')
        
        Pmr = np.logspace(-12,-1,1000)
        plt.loglog(Pmr, apd_model.Iapd(Resp,60,Pmr), color='black', label='Minimum response', linestyle='--')
        
        plt.axvline(0.2e-3*300,color='red')
        plt.axvline(1e-3*300,color='red',linestyle='--')
        
        plt.ylabel('APD current, A')
        plt.xlabel('Optical power, W')
        plt.title('APD CW response, $V_{bias}=%d V$'%Vbias)
        plt.legend()
    
    if 0:
        #H Plot noises, dark noise, both raw and interpolated
        plt.figure()
        plt.loglog(apd_model.M_noise, apd_model.I_noise)
        
        plt.loglog(apd_model.M_dark_noise, apd_model.I_dark_noise)
        
        Ms = np.logspace(0,2.5,100)
        
        plt.loglog(Ms, apd_model.Inoise(Ms,350e-9))
        plt.loglog(Ms, apd_model.Inoise(Ms,5e-9))
        plt.loglog(Ms, apd_model.Inoise_dark(Ms))
    
    if 1:
        Rq = 1e6
        Pbg = np.logspace(-10,-1,100)
        Ppl = np.logspace(-10,1,100)
        Isat = 30e-3
        
        Frep = 10e3
        Tp = 10e-9
        dutty = Frep*Tp
        Flow = 10e3 #1KHz
        Fhigh = 100e6 #100MHz
        amp_noise_p = 3.5988e-3 #from ltspice
        amp_noise_m = 3.6079e-3 #from ltspice
        amp_imped = 112e3 #ohms, from ltspice
        
        amp_noise_input = np.sqrt(amp_noise_p**2+amp_noise_m**2)/amp_imped
        
        Vcv,Pcv = apd_model.APDcurve(Vbias,Resp,Rq)
        id = Pcv.argsort()
        Pcv = Pcv[id]
        Vcv = Vcv[id]
        def Vapd_exp(Pb,Pi):
            Pavg = Pb*(1-dutty) + Pi*dutty
            Vi = np.interp(Pavg,Pcv,Vcv)
            return Vi
            
        def Iapd_exp(Pb,Pi):
            Vi = Vapd_exp(Pb,Pi)
            return apd_model.Iapd(Resp,Vi,Pi)
        
        Pbg = Pbg[...,np.newaxis]
    
        
        Pplm,Pbgm = np.meshgrid(Ppl,Pbg)
        Ptot = Pbgm + Pplm
        
        Vbg = Vapd_exp(Pbg,Ptot)
        Ibg = apd_model.Iapd(Resp,Vbg,Pbg)
        
        Itot = Iapd_exp(Pbg,Ptot)
        
        Isig = Itot - Ibg
        
        Vapdm = Vapd_exp(Pbg,Ptot)
        
        Papd = Ibg*Vapdm*(1-dutty) + Itot*Vapdm*dutty + Pbg*(1-dutty) + Ptot*dutty
        
        Mm = apd_model.Mtrue(Vapdm)
        
        I_n = apd_model.Inoise(Mm,Ptot)*np.sqrt(Fhigh-Flow)*1e-12
        
        I_n_low = apd_model.Inoise(Mm,Pbg)*np.sqrt(Fhigh-Flow)*1e-12
        
        
        I_n_f = np.sqrt(I_n**2 + amp_noise_input**2)
        
        SNR = (Isig/I_n_f)*(Isig<Isat)
        
        #Vapd = np.interp(Pbg,Pcv,Vcv)
        #plt.figure()
        #plt.semilogx(Pbg,Vapd)
        #plt.xlabel('Background optical power, W')
        
        #P_degen = np.interp(70,Vcv,Pcv)
        
        #Meff = Isig/Ppl
        
        #print(Icv)
        #print(Ibg)
        
        
        #plt.figure()
        #plt.xscale('log')
        #plt.yscale('log')
        #plt.pcolor(Ppl,Pbg,np.log(Isig))
        #plt.xlabel('Pulse optical power, W')
        #plt.ylabel('Background optical power, W')
        
        
        
        #plt.figure()
        #plt.xscale('log')
        #plt.yscale('log')
        #plt.pcolor(Ppl,Pbg,I_n, norm = mpc.LogNorm())
        #plt.xlabel('Pulse optical power, W')
        #plt.ylabel('Background optical power, W')
        #plt.colorbar(label='Noise, $pA$')
        
        #plt.figure()
        #plt.xscale('log')
        #plt.yscale('log')
        #plt.pcolor(Ppl,Pbg,Itot, norm = mpc.LogNorm())
        #plt.xlabel('Pulse optical power, W')
        #plt.ylabel('Background optical power, W')
        #plt.colorbar(label='Signal, $pA$')
        
        Vcv,Pcv = apd_model.APDcurve(Vbias,Resp,Rq)
        id = Vcv.argsort()
        Pcvs = Pcv[id][:-100]
        Vcvs = Vcv[id][:-100]
        P_degen = np.interp(65,Vcvs,Pcvs)
    
        fig = plt.figure()
        plt.xscale('log')
        plt.yscale('log')
        plt.pcolor(Ppl,Pbg,SNR, norm = mpc.LogNorm())
        plt.axhline(60e-3,label='APD CW power limit',color='red')
        
        #plt.axhline(P_degen,label='APD gain drop',color='red',linestyle='--')
        
        SNR_trg = 5
        Ppl_at_SNR_tg = []
        for i in range(len(Pbg)):
            keep = np.nonzero(SNR[i,:])
            Ppl_at_SNR_tg.append(np.interp(SNR_trg,SNR[i,keep].flatten(),Pplm[i,keep].flatten()))
        Ppl_at_SNR_tg = np.array(Ppl_at_SNR_tg)
        plt.loglog(Ppl_at_SNR_tg,Pbg,color='black',label='$SNR=5$')
        
        Vpd_trg = 65
        Ppl_at_Vpd_tg = []
        for i in range(len(Pbg)):
            keep = np.flip(np.nonzero(Vapdm[i,:]))
            try: Ppl_at_Vpd_tg.append(np.interp(Vpd_trg,Vapdm[i,keep].flatten(),Pplm[i,keep].flatten()))
            except: Ppl_at_Vpd_tg.append(0)
        Ppl_at_Vpd_tg = np.array(Ppl_at_Vpd_tg)
        plt.loglog(Ppl_at_Vpd_tg,Pbg,color='red',linestyle='--',label='APD gain drop')
        
        Isig_trg1 = Isat
        Isig_trg2 = 2
        Ppl_at_Isig_trg1 = []
        Ppl_at_Isig_trg2 = []
        for i in range(len(Pbg)):
            vals = np.interp((Isig_trg1,Isig_trg2),Isig[i,:],Pplm[i,:])
            Ppl_at_Isig_trg1.append(vals[0])
            Ppl_at_Isig_trg2.append(vals[1])
        Ppl_at_Isig_trg1 = np.array(Ppl_at_Isig_trg1)
        Ppl_at_Isig_trg2 = np.array(Ppl_at_Isig_trg2)
        plt.loglog(Ppl_at_Isig_trg1,Pbg,color='black',label='TIA saturation',linestyle='--')
        plt.loglog(Ppl_at_Isig_trg2,Pbg,color='orange',label='TIA current limit')
        
        Itot_trg = 50e-3
        Ppl_at_Itot_trg = []
        for i in range(len(Pbg)):
            Ppl_at_Itot_trg.append(np.interp(Itot_trg,Itot[i,:],Pplm[i,:]))
        Ppl_at_Itot_trg = np.array(Ppl_at_Itot_trg)
        #plt.loglog(Ppl_at_Itot_trg,Pbg,color='orange',label='$I_{APD} = 50$ mA',linestyle='--')
        
        plt.xlabel('Pulse optical power, W')
        plt.ylabel('Background optical power, W')
        plt.colorbar(label='SNR')
        plt.legend(loc=2)#bbox_to_anchor=(1,0), loc="lower right",bbox_transform=fig.transFigure)
        plt.title('Operating range for SAR3000 + LTC6560, $R_q=1M\Omega$')
    
    
        plt.figure()
        plt.xscale('log')
        plt.yscale('log')
        #plt.pcolor(Ppl,Pbg, (Isig<2) + 2*(Papd<(200e-6*300)) + 4*(Vapdm>70) + 8*(SNR<1))
        #plt.pcolor(Ppl,Pbg, np.log(I_n)-np.log(amp_noise_input))
        plt.pcolor(Ppl, Pbg, I_n_low) #current noise due to background optical power?
        plt.xlabel('Pulse optical power, W')
        plt.ylabel('Background optical power, W')
        plt.colorbar()
        plt.axhline(60e-3,label='APD CW power limit',color='red')
        plt.loglog(Ppl_at_Vpd_tg,Pbg,color='red',linestyle='--',label='APD gain drop')
        plt.loglog(Ppl_at_Isig_trg1,Pbg,color='black',label='TIA saturation',linestyle='--')
        plt.loglog(Ppl_at_Isig_trg2,Pbg,color='orange',label='TIA current limit')
        plt.loglog(Ppl_at_SNR_tg,Pbg,color='black',label='$SNR=5$')
        plt.legend(loc=2)
        
        
    
    plt.show()

